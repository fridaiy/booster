

#include "booster/macro/basic.hpp"
#include "booster/macro/codegen.hpp"

#define BOOSTER_MACRO_DB_CLIENT_PARAM_TYPE(MACRO, TYPE, PARAM_LIST) TYPE
#define BOOSTER_MACRO_DB_CLIENT_PARAM_NAME(MACRO, TYPE, PARAM_LIST) BOOSTER_MACRO_FIRSTARG PARAM_LIST
#define BOOSTER_MACRO_DB_CLIENT_PARAM_TYPE_STR(MACRO, TYPE, PARAM_LIST) #TYPE
#define BOOSTER_MACRO_DB_CLIENT_PARAM_NAME_STR(MACRO, TYPE, PARAM_LIST) BOOSTER_MACRO_FIRSTARG_STR PARAM_LIST

#define BOOSTER_MACRO_DB_CLIENT_PARAM_MACRO(MACRO, TYPE, PARAM_LIST) MACRO(TYPE, PARAM_LIST)
#define BOOSTER_MACRO_DB_CLIENT_PREPARE_MACRO(MACRO, VAL) MACRO(VAL)

#define BOOSTER_MACRO_DB_CLIENT_PARAM_MACRO_TYPE(MACRO, TYPE, PARAM_LIST) MACRO ##_TYPE(TYPE, PARAM_LIST)

#define BOOSTER_MACRO_DB_CLIENT_PARAM(MACRO, TYPE, PARAM_LIST) (MACRO, TYPE, PARAM_LIST)
#define BOOSTER_MACRO_DB_CLIENT_PREPARE(MACRO, VAL) (MACRO, VAL)

#define PARAM(TYPE, ...)        BOOSTER_MACRO_DB_CLIENT_PARAM(BOOSTER_MACRO_DB_CLIENT_PARAM_PARAM, TYPE, (__VA_ARGS__))
#define PREPARE(VAL)            BOOSTER_MACRO_DB_CLIENT_PREPARE(BOOSTER_MACRO_DB_CLIENT_PARAM_PREPARE, VAL)

//////////////////////////////////////////////////////////////////////////

#define BOOSTER_MACRO_DB_CLIENT_MACRO_SELECTOR(MACRO, TYPE, ...) \
BOOSTER_MACRO_EXPAND(BOOSTER_MACRO_MACRO_SELECTOR(MACRO, (__VA_ARGS__)) (TYPE, __VA_ARGS__))

//////////////////////////////////////////////////////////////////////////

// PARAM MACRO USE-CASE

#define BOOSTER_MACRO_DB_CLIENT_PARAM_PARAM_PUT_DECL(X) \
const BOOSTER_MACRO_DB_CLIENT_PARAM_TYPE X & BOOSTER_MACRO_DB_CLIENT_PARAM_NAME X,

#define BOOSTER_MACRO_DB_CLIENT_PARAM_PARAM_PUT_TYPE(X) \
BOOSTER_MACRO_DB_CLIENT_PARAM_MACRO_TYPE X

#define BOOSTER_MACRO_DB_CLIENT_PARAM_PARAM_PUT_BODY(X) \
BOOSTER_MACRO_DB_CLIENT_PARAM_MACRO X

// PARAM MACRO

#define BOOSTER_MACRO_DB_CLIENT_PARAM_PARAM_1(TYPE, NAME) \
__params.insert({#NAME, NAME});

#define BOOSTER_MACRO_DB_CLIENT_PARAM_PARAM_2(TYPE, NAME, QUALIFIER) \
__params.insert({QUALIFIER, NAME});

#define BOOSTER_MACRO_DB_CLIENT_PARAM_PARAM(TYPE, PARAM_LIST) \
BOOSTER_MACRO_DB_CLIENT_MACRO_SELECTOR(BOOSTER_MACRO_DB_CLIENT_PARAM_PARAM_, TYPE, BOOSTER_MACRO_UNFOLD_VA_ARGS PARAM_LIST)

// PARAM_TYPE MACRO

#define BOOSTER_MACRO_DB_CLIENT_PARAM_PARAM_TYPE_1(TYPE, NAME) \
map.insert({#NAME, TYPE::Class::getType()});

#define BOOSTER_MACRO_DB_CLIENT_PARAM_PARAM_TYPE_2(TYPE, NAME, QUALIFIER) \
map.insert({QUALIFIER, TYPE::Class::getType()});

#define BOOSTER_MACRO_DB_CLIENT_PARAM_PARAM_TYPE(TYPE, PARAM_LIST) \
BOOSTER_MACRO_DB_CLIENT_MACRO_SELECTOR(BOOSTER_MACRO_DB_CLIENT_PARAM_PARAM_TYPE_, TYPE, BOOSTER_MACRO_UNFOLD_VA_ARGS PARAM_LIST)

// PREPARE MACRO USE-CASE

#define BOOSTER_MACRO_DB_CLIENT_PARAM_PREPARE_PUT_DECL(X)

#define BOOSTER_MACRO_DB_CLIENT_PARAM_PREPARE_PUT_TYPE(X) \
BOOSTER_MACRO_DB_CLIENT_PREPARE_MACRO X

#define BOOSTER_MACRO_DB_CLIENT_PARAM_PREPARE_PUT_BODY(X)

// PREPARE MACRO

#define BOOSTER_MACRO_DB_CLIENT_PARAM_PREPARE(VAL) \
__prepare = VAL;

// PARAMS USE-CASE

#define BOOSTER_MACRO_PARAM_USECASE_DECL(MACRO, ...) MACRO ## _PUT_DECL((MACRO, __VA_ARGS__))
#define BOOSTER_MACRO_PARAM_USECASE_TYPE(MACRO, ...) MACRO ## _PUT_TYPE((MACRO, __VA_ARGS__))
#define BOOSTER_MACRO_PARAM_USECASE_BODY(MACRO, ...) MACRO ## _PUT_BODY((MACRO, __VA_ARGS__))

// FOR EACH

#define BOOSTER_MACRO_DB_CLIENT_PARAM_PUT_DECL(INDEX, COUNT, X) \
BOOSTER_MACRO_PARAM_USECASE_DECL X

#define BOOSTER_MACRO_DB_CLIENT_PARAM_PUT_TYPE(INDEX, COUNT, X) \
BOOSTER_MACRO_PARAM_USECASE_TYPE X

#define BOOSTER_MACRO_DB_CLIENT_PARAM_PUT(INDEX, COUNT, X) \
BOOSTER_MACRO_PARAM_USECASE_BODY X

// QUERY MACRO

#define BOOSTER_QUERY_0(NAME, QUERY_TEXT) \
const booster::data::share::StringTemplate Z_QUERY_TEMPLATE_##NAME = \
  this->parseQueryTemplate(#NAME, QUERY_TEXT, {}, false); \
\
std::shared_ptr<booster::orm::QueryResult> NAME(const booster::provider::ResourceHandle<booster::orm::Connection>& connection = nullptr) { \
  std::unordered_map<booster::String, booster::Void> __params; \
  return this->execute(Z_QUERY_TEMPLATE_##NAME, __params, connection); \
}


#define BOOSTER_QUERY_1(NAME, QUERY_TEXT, ...) \
\
booster::data::share::StringTemplate Z_QUERY_TEMPLATE_CREATOR_##NAME() { \
  bool __prepare = false; \
  booster::orm::Executor::ParamsTypeMap map;  \
  \
  BOOSTER_MACRO_FOREACH(BOOSTER_MACRO_DB_CLIENT_PARAM_PUT_TYPE, __VA_ARGS__) \
  \
  return this->parseQueryTemplate(#NAME, QUERY_TEXT, map, __prepare); \
} \
\
const booster::data::share::StringTemplate Z_QUERY_TEMPLATE_##NAME = Z_QUERY_TEMPLATE_CREATOR_##NAME(); \
\
std::shared_ptr<booster::orm::QueryResult> NAME( \
  BOOSTER_MACRO_FOREACH(BOOSTER_MACRO_DB_CLIENT_PARAM_PUT_DECL, __VA_ARGS__) \
  const booster::provider::ResourceHandle<booster::orm::Connection>& connection = nullptr \
) { \
  std::unordered_map<booster::String, booster::Void> __params; \
  BOOSTER_MACRO_FOREACH(BOOSTER_MACRO_DB_CLIENT_PARAM_PUT, __VA_ARGS__) \
  return this->execute(Z_QUERY_TEMPLATE_##NAME, __params, connection); \
}

// Chooser

#define BOOSTER_QUERY_MACRO_0(NAME, QUERY_TEXT) \
BOOSTER_QUERY_0(NAME, QUERY_TEXT)

#define BOOSTER_QUERY_MACRO_1(NAME, QUERY_TEXT, ...) \
BOOSTER_QUERY_1(NAME, QUERY_TEXT, __VA_ARGS__)


#define QUERY(NAME, ...) \
BOOSTER_MACRO_EXPAND(BOOSTER_MACRO_MACRO_BINARY_SELECTOR(BOOSTER_QUERY_MACRO_, (__VA_ARGS__)) (NAME, __VA_ARGS__))
